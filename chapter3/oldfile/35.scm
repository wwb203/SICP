(define (front-ptr queue) (car queue))
(define (rear-ptr queue) (cdr queue))
(define (set-front-ptr! queue item)
  (set-car! queue item))
(define (set-rear-ptr! queue item)
  (set-cdr! queue item))
(define (empty-queue? queue)
  (null? (front-ptr queue)))
(define (make-queue) (cons '() '()))
(define (front-queue queue)
  (if (empty-queue? queue)
    (error "FRONT called with an
	   empty queue" queue)
    (car (front-ptr queue))))
(define (insert-queue! queue item)
  (let ((new-pair (cons item '())))
    (cond ((empty-queue? queue)
	   (set-front-ptr! queue new-pair)
	   (set-rear-ptr! queue new-pair))
	  (else
	    (set-cdr! (rear-ptr queue)
		      new-pair)
	    (set-rear-ptr! queue new-pair)
	    queue))))
(define (delete-queue! queue)
  (cond ((empty-queue? queue)
	 (error "DELETE! called with
		an empty queue" queue))
	(else
	  (set-front-ptr!
	    queue
	    (cdr (front-ptr queue)))
	  queue)))
(define (print-queue queue)
  (define (print ptr)
    (if (null? ptr)
      (display '())
      (begin  
      (display (car ptr)) 
      (print (cdr ptr)))))
  (print (front-ptr queue)))
(define (make-queue)
  (let ((front-ptr '())
	(rear-ptr '()))
    (define (set-front-ptr! item)
      (set! front-ptr item))
    (define (set-rear-ptr! item)
      (set! rear-ptr item))
    (define (empty?)
      (null? front-ptr))
    (define (front)
      (if (empty?)
	(error "FRONT called with an
	       empty queue")
	(car front-ptr)))
    (define (insert item)
      (let ((new-pair (cons item '())))
	(cond ((empty?)
	       (set-front-ptr! new-pair)
	       (set-rear-ptr! new-pair))
	      (else
		(set-cdr! rear-ptr new-pair)
		(set-rear-ptr! new-pair)))))
    (define (delete!)
      (cond ((empty?)
	     (error "DELETE! called with
		    an empty queue"))
	    (else
	      (set-front-ptr!
		(cdr front-ptr)))))
(define (print)
  (define (sub ptr)
    (if (null? ptr)
      (display '())
      (begin  
      (display (car ptr)) 
      (sub (cdr ptr)))))
  (sub  front-ptr)) 

    (define (dispatch m) 
    (cond ((eq? m 'delete!) delete!)
	  ((eq? m 'insert) insert)
	  ((eq? m 'front) front)
	  ((eq? m 'print) print)
	  (else (error "UNKNOWN command QUEUE"))) )
    dispatch))
(define queue (make-queue))
((queue 'insert) 'a)
((queue 'insert) 'b)
((queue 'print))
(define (make-de-cell item)
  (let ((content item)
	(pre-ptr '())
	(next-ptr '()))
    (define (set-pre-ptr! ptr)
      (set! pre-ptr ptr))
    (define (set-next-ptr! ptr)
      (set! next-ptr ptr))
    (define (dispatch m)
      (cond ((eq? m 'set-pre-ptr!) set-pre-ptr!)
	    ((eq? m 'set-next-ptr!) set-next-ptr!)
	    ((eq? m 'get-pre-ptr) pre-ptr)
	    ((eq? m 'get-next-ptr) next-ptr)
	    ((eq? m 'get-content) item)))
    dispatch))
(define (make-deque)
  (cons '() '()))
(define (front-deque deque)
  (car deque))
(define (rear-deque deque)
  (cdr deque))
(define (empty-deque? deque)
  (and (null? (front-deque deque))
       (null? (rear-deque deque))))
(define (set-front-deque! deque cell)
  (set-car! deque cell))
(define (set-rear-deque! deque cell)
  (set-cdr! deque cell))
(define (front-insert-deque! deque item)
  (let ((cell (make-de-cell item))) 
  (cond ((empty-deque? deque)
	 (set-front-deque! deque cell)
	 (set-rear-deque! deque cell))
	(else
	  ((cell 'set-next-ptr!) (front-deque deque))
	  (((front-deque deque) 'set-pre-ptr!) cell)
	  (set-front-deque! deque cell))))
  (print-deque deque))
(define (front-delete-deque! deque)
  (cond ((empty-deque? deque)
         (error "DELETE! called with
	 an empty queue"))
	((null? ((front-deque deque) 'get-next-ptr))
	 (set-front-deque! deque '())
	 (set-rear-deque! deque '())) 
	(else
	   ((((front-deque deque) 'get-next-ptr)
		  'set-pre-ptr!) '())
	   (set-front-deque! deque
			     ((front-deque deque) 
			      'get-next-ptr))))
  (print-deque deque))
(define (rear-delete-deque! deque)
  (cond ((empty-deque? deque)
         (error "DELETE! called with
	 an empty queue"))
	((null? ((rear-deque deque) 'get-pre-ptr))
	 (set-front-deque! deque '())
	 (set-rear-deque! deque '())) 
	(else
	   ((((rear-deque deque) 'get-pre-ptr)
		  'set-next-ptr!) '())
	   (set-rear-deque! deque
			     ((rear-deque deque) 
			      'get-pre-ptr))))
  (print-deque deque))
(define (rear-insert-deque! deque item)
  (let ((cell (make-de-cell item))) 
  (cond ((empty-deque? deque)
	 (set-front-deque! deque cell)
	 (set-rear-deque! deque cell))
	(else
	  ((cell 'set-pre-ptr!) (rear-deque deque))
	  (((rear-deque deque) 'set-next-ptr!) cell)
	  (set-rear-deque! deque cell))))
  (print-deque deque))
(define (print-deque deque)
  (define (print ptr)
    (if (null? ptr)
      (display '())
      (begin  
      (display (ptr 'get-content)) 
      (print (ptr 'get-next-ptr)))))
  (print (front-deque deque)))
(define dq1 (make-deque))
(front-insert-deque! dq1 'a)
(front-insert-deque! dq1 'b)
(rear-insert-deque! dq1 'c)
(print-deque dq1)
