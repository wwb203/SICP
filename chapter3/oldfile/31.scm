(define balance 100)
(define (withdraw amount)
  (if (>= balance amount)
    (begin (set! balance (- balance amount))
	   balance)
    "Insufficient funds"))
(define new-withdraw
  (let ((balance 100))
    (lambda (amount)
      (if (>= balance amount)
	(begin (set! balance
		 (- balance amount))
	       balance)
	"insufficient funds"))))
(define (make-withdraw balance)
  (lambda (amount)
    (if (>= balance amount)
      (begin (set! balance 
	     (- balance amount))
	     balance)
      "Insufficient funds")))
(define (make-account balance)
  (define (withdraw amount)
    (if (>= balance amount)
      (begin (set! balance (- balance amount))
	     balance)
      "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (dispatch m)
    (cond ((eq? m 'withdraw) withdraw)
	  ((eq? m 'deposit) deposit)
	  (else (error "Unknown request:
		       MAKE-ACCOUNT" m))))
dispatch)
(define (make-accumulator sum)
  (lambda (amount)
    (set! sum (+ sum amount))
    sum))
(define (make-monitored function)
  (let ((counter 0))
   (lambda (var)
     (cond ((eq? var 'how-many-calls?)
	   counter)
	   (else (begin (set! counter (+ counter 1))
			(function var)))))))
(define (make-account balance password)
  (define (withdraw amount)
    (if (>= balance amount)
      (begin (set! balance (- balance amount))
	     balance)
      "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (error-pwd amount)
    "Incorrect password")
 (define (test-pwd pwd)
 (let ((counter 0)) 
   (if (eq? pwd password)
	(begin (set! counter 0)
	      #t)	
	(begin (set! counter (+ 1 counter))
	       (if (> counter 3)
		 (display "Call the cops") 
	       #f)))))
  (define (dispatch pwd m)
    (if (test-pwd pwd) 
	    (cond ((eq? m 'withdraw) withdraw)
		  ((eq? m 'deposit) deposit)
		  (else (error "Unknown request:
			       MAKE-ACCOUNT" m))) 
       error-pwd))
dispatch)
(define (rand-update x) 
 (let ((m (expt 2 31))
       (a 1103515245)
       (c 12345))
   (modulo (+ c (* a x)) m))) 
(define rand-init 137)
(define rand
  (let ((x rand-init))
    (lambda () (set! x (rand-update x)) x)))
(define (estimate-pi trials)
  (sqrt (/ 6 (monte-carlo trials
			  cesaro-test))))
(define (cesaro-test)
  (= (gcd (rand) (rand)) 1))
(define (monte-carlo trials experiment)
  (define (iter trials-remaining trials-passed)
    (cond ((= trials-remaining 0)
	   (/ trials-passed trials))
	  ((experiment)
	   (iter (- trials-remaining 1)
		 (+ trials-passed 1)))
	  (else
	    (iter (- trials-remaining 1)
		  trials-passed))))
  (iter trials 0))
(define (make-simplified-withdraw balance)
  (lambda (amount)
    (set! balance (- balance amount))
      balance))
(define W1 (make-simplified-withdraw 25))
(define W2 (make-simplified-withdraw 25))


