(define get 2d-get)
(define put 2d-put!)
(define (attach-tag type-tag contents)
  (cons type-tag contents))
(define (deriv exp var)
  (cond ((number? exp) 0)
	((variable? exp) (if (same-variable? exp var) 1 0))
	(else ((get 'deriv (operator exp))
	       (operands exp) var))))
(define (operator exp) (car exp))
(define (operands exp) (cdr exp))
(define (install-deriv-sum)
  (define (addend exp) (car exp))
  (define (augend exp) (cadr exp))
  (define (make-sum v1 v2)
    (list '+ v1 v2))
  (define (deriv-sum exp-list var)
    (make-sum (deriv (addend exp-list) var)
	      (deriv (augend exp-list) var)))
  (put 'deriv '+ deriv-sum)
  'done
  )
(define (variable? s)
  (symbol? s))
(define (same-variable? v1 v2)
  (and (variable? v1) (variable? v2) (eq? v1 v2)))

(install-deriv-sum)
(deriv '(+ x y) 'x)
