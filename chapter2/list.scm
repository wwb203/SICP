(define nil '())
(define (list-ref items n)
  (if (= n 0)
    (car items)
    (list-ref (cdr items) (- n 1))))
(define squares (list 1 4 9 16 25))
(list-ref squares 3)
(define (length items)
  (if (null? items)
    0
    (+ 1 (length (cdr items)))))
(define odds (list 1 3 5 7))
(length odds)
(define (length items)
  (define (length-iter items n)
    (if (null? items)
    n
    (length-iter (cdr items) (+ n 1))))
  (length-iter items 0))
(length odds)
(define (append list1 list2)
  (if (null? list1)
    list2
    (cons (car list1) (append (cdr list1) list2))))
(append squares odds)
(define (last-pair items)
  (cond ((null? items) nil)
        ((null? (cdr items)) items)
        (else (last-pair (cdr items)))))
(last-pair (list 23 72 149 34))
(define (reverse items)
  (cond ((null? items) nil)
        (else (append (reverse (cdr items)) (list (car items))))))
(reverse odds)
