(define (make-mobile left right)
  (list left right))
(define (make-branch length structure)
  (list length structure))
(define left-branch car)
(define right-branch cadr)
(define branch-structure cadr)
(define branch-length car)
(define (total-weight mobile)
  (if (not (pair? mobile)) mobile
  (let ((lb (left-branch mobile))
        (rb (right-branch mobile)))
    (let ((ls (branch-structure lb))
          (rs (branch-structure rb)))
      (+ (total-weight ls) (total-weight rs))))))
(define (balanced mobile)
  (if (not (pair? mobile)) #t
    (let ((lb (left-branch mobile))
          (rb (right-branch mobile)))
            (let ((ll (branch-length lb))
                  (rl (branch-length rb))
                  (lw (total-weight (branch-structure lb)))
                  (rw (total-weight (branch-structure rb))))
              (and (balanced (branch-structure lb))
                   (balanced (branch-structure rb))
                   (= (* ll lw) (* rl rw)))))))
(define b1l (make-branch 3 2))
(define b1r (make-branch 2 3))
(define b2l (make-branch 1 6))
(define b2r (make-branch 6 2))
(define ml (make-mobile b1l b1r))
(define mr (make-branch b2l b2r))
(define bl (make-branch 7 ml))
(define br (make-branch 5 mr))
(define m0 (make-mobile bl br))
(total-weight m0)
(balanced m0)

