(define (cc amount coin-values)
  (cond ((= amount 0) 1)
        ((or (< amount 0) (no-more? coin-values)) 0)
        (else (+ (cc amount
               (except-first-denomination
                 coin-values))
           (cc (- amount (first-denomination coin-values))
                  coin-values)))))
(define (first-denomination coin-values)
  (car coin-values))
(define (no-more? coin-values)
  (null? coin-values))
(define (except-first-denomination coin-values)
  (cdr coin-values))
(define us-coins (list 50 25 10 5 1))
(define us-coins-2 (list 1 5 10 25 50))
(cc 100 us-coins)
(define (same-parity x . items)
  (define (build list0 list1)
    (display list0)
    (cond ((null? list0) list1)
          ((= (remainder (abs (- x (car list0))) 2) 0) 
           (build (cdr list0) (append  list1 (list (car list0)))))
          (else (build (cdr list0) list1))))
  (cons x (build items '()))
)
(same-parity 1 2 3 4 5 6 7)
(define (scale-list items factor)
  (if (null? items)
    nil
    (cons (* (car items) factor)
          (scale-list (cdr items) factor))))
