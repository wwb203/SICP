(define (element-of-set? x set)
  (cond ((null? set) #f)
        ((equal? (car set) x) #t)
        (else (element-of-set? x (cdr set)))))
(define (adjoin-set x set)
  (if (element-of-set? x set)
    set
    (cons x set)))
(define (intersection-set set1 set2)
  (cond ((or (null? set1) (null? set2)) '())
        ((element-of-set? (car set1) set2)
         (cons (car set1) 
               (intersection-set (cdr set1) set2)))
         (else (intersection-set (cdr set1) set2))))
(define (union-set set1 set2)
  (cond ((null? set1) set2)
        ((null? set2) set1)
        ((element-of-set? (car set1) set2)
         (union-set (cdr set1) set2))
        (else (cons (car set1) (union-set (cdr set1) set2)))))
(define set1 (list 1 2 3))
(define set2 (list 2 3 4))
(define (element-of-set? x set)
  (cond ((null? set) #f)
        ((= x (car set)) #t)
        ((< x (car set)) #f)
        (else (element-of-set? x (cdr set)))))
(define (adjoin-set x set)
  (if (null? set) x
    (let ((x1 (car set)))
      (cond ((< x1 x) (cons x1 (adjoin-set x (cdr set))))
            ((= x1 x) set)
            (else (cons x set))))))
(define (intersection-set set1 set2)
  (if (or (null? set1) (null? set2)) '()
        (let ((x1 (car set1))
              (x2 (car set2)))
          (cond ((= x1 x2) (cons x1 (intersection-set (cdr set1) (cdr set2))))
                ((< x1 x2) (intersection-set (cdr set1) set2))
                (else (intersection-set set1 (cdr set2)))))))
(define (union-set set1 set2)
  (if (null? set1) set2
    (if (null? set2) set1
      (let ((x1 (car set1))
            (x2 (car set2)))
        (cond ((= x1 x2) (cons x1 (union-set (cdr set1) (cdr set2))))
              ((< x1 x2) (cons x1 (union-set (cdr set1) set2)))
              (else (cons x2 (union-set set1 (cdr set2)))))))))
(intersection-set set1 set2)
