(define numer car)
(define denom cdr)
(define (make-rat x y)
  (define (find-sign x y)
    (cond ((OR (AND (> x 0) (< y 0))
               (AND (> y 0) (< x 0))) -1)
          (else 1)))
  (let ((g (gcd (abs x) (abs y)))
        (sign (find-sign x y)))
    (cons (* sign (abs (/ x g))) (abs (/ y g)))))
(define (print-rat x)
  (newline)
  (display (numer x))
  (display "/")
  (display (denom x)))
(define (sum-rat a b)
  (let ((x1 (numer a))
        (y1 (denom a))
        (x2 (numer b))
        (y2 (denom b)))
    (make-rat (+ (* x1 y2) (* x2 y1))
              (* y1 y2))))
(define (sub-rat a b)
  (sum-rat a (neg-rat b)))
(define (neg-rat a)
  (let ((x (numer a))
        (y (denom a)))
    (make-rat (- x) y)))
(define (mul-rat a b)
  (let ((x1 (numer a))
        (y1 (denom a))
        (x2 (numer b))
        (y2 (denom b)))
    (make-rat (* x1 x2) (* y1 y2))))
(define (inv-rat a)
  (let ((x (numer a))
        (y (denom a)))
    (make-rat y x)))
(define (div-rat a b)
  (mul-rat a (inv-rat b)))
(define (equal-rat? a b)
  (let ((x1 (numer a))
        (y1 (denom a))
        (x2 (numer b))
        (y2 (denom b)))
    (= (* x1 y2) (* y1 x2))))


