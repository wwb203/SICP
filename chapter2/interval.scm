(define (>= x y)
  (OR (> x y) (= x y)))
(define (make-interval x y)
  (if (< x y)
    (cons x y)
    (cons y x)))
(define lower-bound car)
(define upper-bound cdr)
(define (add-interval x y)
  (make-interval (+ (lower-bound x) (lower-bound y))
                 (+ (upper-bound x) (upper-bound y))))
(define (sub-interval x y)
  (make-interval (- (lower-bound x) (upper-bound y))
                 (- (upper-bound x) (lower-bound y))))
(define (mul-interval x y)
  (let ((l1 (lower-bound x))
        (u1 (upper-bound x))
        (l2 (lower-bound y))
        (u2 (upper-bound y)))
    (cond ((>= l1 0) 
           (cond ((>= l2 0) 
                  (make-interval (* l1 l2) (* u1 u2)))
                 ((AND (< l2 0) (>= u2 0))
                  (make-interval (* u1 l2) (* u1 u2)))
                 ((< u2 0)
                  (make-interval (* u1 l2) (* l1 u2)))))
          ((AND (< l1 0) (>= u1 0))
           (cond ((>= l2 0)
                  (make-interval (* l1 u2) (* u1 u2)))
                 ((AND (< l2 0) (>= u2 0))
                  (make-interval (min (* u1 l2) (* l1 u2))
                                 (max (* l1 l2) (* u1 u2))))
                 ((< u2 0)
                  (make-interval (* u1 l2) (* l1 l2))))) 
          ((< u1 0)
           (cond ((>= l2 0)
                  (make-interval (* l1 u2) (* u1 l2)))
                 ((AND (< l2 0) (>= u2 0))
                  (make-interval (* l1 u2) (* l1 l2)))
                 ((< u2 0)
                  (make-interval (* u1 u2) (* l1 l2))))))))
(define (inv-interval x)
  (let ((l (lower-bound x))
        (u (upper-bound x)))
    (if (OR (> l 0) (< u 0))
      (make-interval (/ 1.0 u) (/ 1.0 l))
      (error "trying 1/0" x))))
(define (div-interval x y)
  (mul-interval x (inv-interval y)))
(define (print-interval x)
  (newline)
  (display "[")
  (display (lower-bound x))
  (display ",")
  (display (upper-bound y))
  (display "]"))
(define x (make-interval -1 1))
(define y (make-interval -2 4))
(define z (make-interval 3 4))
