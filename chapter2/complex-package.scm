(define PI (atan 0 -1))
(define (install-sine-cose-package)
  (put 'sine '(integer) sin)
  (put 'cose '(integer) cos)
  (put 'atane '(integer integer) atan)
  (put 'sine '(real) sin)
  (put 'cose '(real) cos)
  (put 'atane '(real real) atan)
  (put 'sine '(rational) (lambda (r) (sine (raise r))))
  (put 'cose '(rational) (lambda (r) (cose (raise r))))
  (put 'atane '(rational rational) (lambda (r1 r2) (atane (raise r1) (raise r2))))
  'done
  )
(install-sine-cose-package)
(define (install-sqrte-package)
  (put 'sqrte '(integer) sqrt)
  (put 'sqrte '(real) sqrt)
  (put 'sqrte '(rational) (lambda (r)
			    (div (sqrt ((get 'numer '(rational)) r))
				 (sqrt ((get 'denom '(rational)) r)))))
  'done
  )
(install-sqrte-package)
(define (sqrte x)
  (apply-generic 'sqrte x)
  )
(define (sine x) (apply-generic 'sine x))
(define (cose x) (apply-generic 'cose x))
(define (atane x y) (apply-generic 'atane x y))
(define (install-rectangular-package)
  ;;internal procedures
  (define (real-part z) (car z))
  (define (imag-part z) (cdr z))
  (define (make-from-real-imag x y) (cons x y))
  (define (magnitude z)
    (sqrte (add (square (real-part z))
	     (square (imag-part z)))))
  (define (angle z)
    (atane (imag-part z) (real-part z)))
  (define (make-from-mag-ang r a)
    (cons (mul r (cose a)) (mul r (sine a))))
  (define (negative z)
    (make-from-real-imag (- (real-part z))
			 (- (imag-part z))))

  ;;interface to the rest of the system
  (define (tag x) (attach-tag 'rectangular x))
  (put 'real-part '(rectangular) real-part)
  (put 'imag-part '(rectangular) imag-part)
  (put 'magnitude '(rectangular) magnitude)
  (put 'angle '(rectangular) angle)
  (put 'negative '(rectangular) (lambda (z) (tag (negative z))))
  (put 'make-from-real-imag 'rectangular
       (lambda (x y) (tag (make-from-real-imag x y))))
  (put 'make-from-mag-ang 'rectangular
       (lambda (r a) (tag (make-from-mag-ang r a))))
  'done)
(install-rectangular-package)
(define (install-polar-package)
  ;;internal procedures
  (define (magnitude z) (car z))
  (define (angle z) (cdr z))
  (define (make-from-mag-ang r a) (cons r a))
  (define (real-part z) (mul (magnitude z) (cose (angle z))))
  (define (imag-part z) (mul (magnitude z) (sine (angle z))))
  (define (make-from-real-imag x y)
    (cons (sqrte (add (square x) (square y)))
	  (atane y x)))
  (define (negative z) (make-from-mag-ang (magnitude z)
					  (add PI (angle z))))
  ;;interface to the rest of the system
  (define (tag x) (attach-tag 'polar x))
  (put 'real-part '(polar) real-part)
  (put 'imag-part '(polar) imag-part)
  (put 'magnitude '(polar) magnitude)
  (put 'negative '(polar) (lambda (z) (tag (negative z))))
  (put 'angle '(polar) angle)
  (put 'make-from-real-imag 'polar
       (lambda (x y) (tag (make-from-real-imag x y))))
  (put 'make-from-mag-ang 'polar
       (lambda (r a) (tag (make-from-mag-ang r a))))
  'done
  )
(install-polar-package)
(define (apply-generic op . args)
  (let ((type-tags (map type-tag args)))
    (let ((proc (get op type-tags)))
      (if proc
	(apply proc (map contents args))
	(error
	  "No method for these types: APPLY-GENERIC"
	  (list op type-tags))))))
(define (real-part z) (apply-generic 'real-part z))
(define (imag-part z) (apply-generic 'imag-part z))
(define (magnitude z) (apply-generic 'magnitude z))
(define (angle z) (apply-generic 'angle z))
(define (negative z) (apply-generic 'negative z))
(define (make-from-real-imag x y)
  ((get 'make-from-real-imag 'rectangular) x y))
(define (make-from-mag-ang r a)
  ((get 'make-from-mag-ang 'polar) r a))
(put 'real-part '(complex) real-part)
(put 'imag-part '(complex) imag-part)
(put 'magnitude '(complex) magnitude)
(put 'angle '(complex) angle)
(put 'negative '(complex) negative)
(define (real-part z) (apply-generic 'real-part z))
(define (imag-part z) (apply-generic 'imag-part  z))
(define (magnitude z) (apply-generic 'magnitude z))
(define (angle z) (apply-generic 'angle  z))


