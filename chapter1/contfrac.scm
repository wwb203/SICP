(define (contfact cal-d cal-n k)
	(define dec (lambda (x) (- x 1)))
	(define (iter cal-d cal-n i result)
		(if (< i 1)
			result
			(iter cal-d cal-n (dec  i)
			(/ (cal-n i) (+ (cal-d i) result)))
		)
	)
(iter cal-d cal-n k 0)
)
(contfact (lambda (x) 1.0) (lambda (x) 1.0) 20)
(define (contfact-recur cal-d cal-n k)
	(define inc (lambda (x) (+ x 1)))
	(define (recur cal-d cal-n i k)
      (if (= i k)
        0
        (/ (cal-n i) (+ (cal-d i) (recur cal-d cal-n (inc i) k))))
		)
(recur cal-d cal-n 1 k))
(contfact-recur (lambda (x) 1.0) (lambda (x) 1.0) 20)
(define (even?3 x)
  (= (remainder x 3) 0))
(define (e-cal-d i)
  (cond ((= i 1) 1)
        ((= i 2) 2)
        ((even?3 (- i 2)) (+ 2 (* 2 (/ (- i 2) 3))))
        (else 1)))
(define identity (lambda (x) x))
(define (cal-e k)
  (+ 2.0 (contfact e-cal-d (lambda (x) 1.0) k)))
(cal-e 20)



