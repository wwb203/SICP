(define (sum term a next b)
  (if (> a b)
    0
    (+ (term a) (sum term (next a) next b))))
(define (inc n)
  (+ n 1))
(define (cube x)
  (* x x x))
(define (sum-cube a b)
  (sum cube a inc b))
(define (integral f a b dx)
  (define (add-dx x)
    (+ x dx))
  (* (sum f (+ a (/ dx 2.0)) add-dx b) dx))
(integral cube 0 1 0.001)
(define (simpson f a b n)
  (define h (/ (- b a) (+ n 0.0)))
  (define (sim-iter f a b n i sum)
    (cond ((> i n) (* sum (/ h 3.0))) 
          ((= i 0) (sim-iter f a b n (inc i) (f a)))
          ((= i n) (sim-iter f a b n (inc i) (+ sum (f b))))
          ((even? i) (sim-iter f a b n (inc i) (+ sum (* 2 (f (+ a (* i h)))))))
          (else (sim-iter f a b n (inc i) (+ sum (* 4 (f (+ a (* i h)))))))
))
  (sim-iter f a b n 0 0))

(define (sum-iter term a next b)
  (define (iter a result)
    (if (> a b) result
      (iter (next a) (+ result (term a)))))
  (iter a 0))
(sum-iter cube 1 inc 10)
