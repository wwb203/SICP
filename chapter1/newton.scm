(load "tool.lisp")
(load "fixpoint.lisp")
(define dx 0.001)
(define (deriv f)
  (lambda (x) (/ (- (f (+ x dx)) (f x)) dx)))
(define (newton-transform g)
  (lambda (x) (- x (/ (g x) ((deriv g) x)))))
(define (newtons-method g)
  (fixpoint (newton-transform g)))
(define (sqrt x)
  (newtons-method
    (lambda (y) (- (square y) x))))
(define (cubic a b c)
  (lambda (x) (+ (* x x x) (* a x x) (* b x) c)))
(define (double f)
  (lambda (x) (f (f x))))
(((double double) inc) 5)
(define (compose f g)
  (lambda (x) (f (g x))))
((compose square inc) 6)
(define (repeat f n)
  (if (= n 0)
    (lambda (x) x)
    (compose f (repeat f (- n 1)))))
((repeat square 2) 5)
(define (smooth f)
  (lambda (x) (/ (+ (f (+ x dx))
                    (f x)
                    (f (- x dx))) 3.0)))

